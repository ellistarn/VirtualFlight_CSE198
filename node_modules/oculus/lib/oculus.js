// Generated by CoffeeScript 1.6.1
(function() {
  var State, StateVal, copy, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  copy = require('copyjs');

  State = (function() {

    function State(name, listeners) {
      this.name = name;
      this.listeners = listeners != null ? listeners : {};
      if (this.name == null) {
        throw 'Ill defined State without a name';
      }
    }

    State.prototype.updateSelf = function(obj, cb) {
      return false;
    };

    State.prototype.inform = function(obj, cb) {
      var k, v, _ref;
      if (this.updateSelf(obj)) {
        _ref = this.listeners;
        for (k in _ref) {
          v = _ref[k];
          if (obj !== v) {
            v.inform(this);
          }
        }
      }
      if (cb) {
        return cb();
      }
    };

    State.prototype.listen = function(obj) {
      if (obj.listeners == null) {
        obj.listeners = {};
      }
      return obj.listeners[this.name] = this;
    };

    State.prototype.connect = function(obj) {
      this.listen(obj);
      return obj.listen(this);
    };

    return State;

  })();

  StateVal = (function(_super) {

    __extends(StateVal, _super);

    function StateVal(name, val, listeners) {
      this.val = val;
      StateVal.__super__.constructor.call(this, name, listeners);
      this;
    }

    StateVal.prototype.updateSelf = function(obj, cb) {
      var pre;
      pre = copy(this.val);
      if (typeof obj.val === 'function') {
        this.val = obj.val();
      } else {
        if (obj.val != null) {
          this.val = obj.val;
        }
      }
      return pre !== this.val;
    };

    return StateVal;

  })(State);

  module.exports = {
    State: State,
    StateVal: StateVal
  };

}).call(this);
